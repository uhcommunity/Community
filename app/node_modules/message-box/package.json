{
  "_args": [
    [
      {
        "raw": "message-box@^0.1.1",
        "scope": null,
        "escapedName": "message-box",
        "name": "message-box",
        "rawSpec": "^0.1.1",
        "spec": ">=0.1.1 <0.2.0",
        "type": "range"
      },
      "/Users/jordanooka/Documents/GitHub/Community/app/node_modules/simpl-schema"
    ]
  ],
  "_from": "message-box@>=0.1.1 <0.2.0",
  "_id": "message-box@0.1.1",
  "_inCache": true,
  "_location": "/message-box",
  "_nodeVersion": "7.10.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/message-box-0.1.1.tgz_1501605845491_0.9170997529290617"
  },
  "_npmUser": {
    "name": "aldeed",
    "email": "aldeed@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "message-box@^0.1.1",
    "scope": null,
    "escapedName": "message-box",
    "name": "message-box",
    "rawSpec": "^0.1.1",
    "spec": ">=0.1.1 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/simpl-schema"
  ],
  "_resolved": "https://registry.npmjs.org/message-box/-/message-box-0.1.1.tgz",
  "_shasum": "778565854cd4527d267373fc20124de187298dac",
  "_shrinkwrap": null,
  "_spec": "message-box@^0.1.1",
  "_where": "/Users/jordanooka/Documents/GitHub/Community/app/node_modules/simpl-schema",
  "author": {
    "name": "Eric Dobbertin",
    "email": "aldeed@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/aldeed/node-message-box/issues"
  },
  "dependencies": {
    "lodash.merge": "^4.6.0",
    "lodash.template": "^4.4.0"
  },
  "description": "A package for defining and getting validation error messages, with support for Meteor Tracker reactivity",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-core": "^6.9.1",
    "babel-eslint": "^6.0.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.5.0",
    "eslint": "^2.11.1",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.8.1",
    "eslint-plugin-jsx-a11y": "^1.3.0",
    "eslint-plugin-react": "^5.1.1",
    "expect": "^1.20.1",
    "jscs": "^3.0.4",
    "mocha": "^2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "778565854cd4527d267373fc20124de187298dac",
    "tarball": "https://registry.npmjs.org/message-box/-/message-box-0.1.1.tgz"
  },
  "files": [
    "dist"
  ],
  "gitHead": "45b0bb9672b267c4a0c4538e4228d8420b97b261",
  "homepage": "https://github.com/aldeed/node-message-box",
  "license": "MIT",
  "main": "./dist/MessageBox.js",
  "maintainers": [
    {
      "name": "aldeed",
      "email": "aldeed@gmail.com"
    }
  ],
  "name": "message-box",
  "optionalDependencies": {},
  "readme": "# MessageBox\n\nAn NPM package for defining and getting validation error messages in JavaScript. Meteor apps can pass in `Tracker` to get reactive language selection.\n\n## Installation\n\n```bash\n$ npm i --save message-box\n```\n\n## Usage\n\n### Defining Messages\n\nYou can define global defaults if necessary:\n\n```js\nMessageBox.defaults({\n  initialLanguage: 'en', // optional; default is 'en'\n  messages: {\n    en: {\n      errorType: '{{name}} is invalid' || function,\n      errorType: {\n        _default: '{{name}} is invalid' || function,\n        fieldName: '{{name}} is invalid' || function,\n      }\n    },\n  }\n});\n```\n\nOtherwise create your `MessageBox` instance like this:\n\n```js\nconst messageBox = new MessageBox({\n  initialLanguage: 'en', // optional; default is 'en'\n  messages: {\n    en: {\n      errorType: '{{name}} is invalid' || function,\n      errorType: {\n        _default: '{{name}} is invalid' || function,\n        fieldName: '{{name}} is invalid' || function,\n      }\n    },\n  }\n});\n```\n\nAnd update the `messages` object as necessary (for example if different packages are adding their own messages for different languages):\n\n```js\nmessageBox.messages({\n  en: {\n    errorType: '{{name}} is invalid' || function,\n    errorType: {\n      _default: '{{name}} is invalid' || function,\n      fieldName: '{{name}} is invalid' || function,\n    }\n  },\n});\n```\n\n`messages` does a deep extend on the existing messages.\n\nFor any of the ways you can set messages, the message can be either a string or a function that returns a string. If it's a string, it may contain handlebars placeholders for anything in the error object or anything passed in the `context` option of the `message` function. If it's a function, it will receive a single `context` argument that has all the same properties that are available as handlebars variables.\n\n#### Example\n\n```js\nMessageBox.defaults({\n  initialLanguage: 'en',\n  messages: {\n    en: {\n      required: '{{label}} is required',\n      minString: '{{label}} must be at least {{min}} characters',\n      maxString: '{{label}} cannot exceed {{max}} characters',\n      minNumber: '{{label}} must be at least {{min}}',\n      maxNumber: '{{label}} cannot exceed {{max}}',\n      minNumberExclusive: '{{label}} must be greater than {{min}}',\n      maxNumberExclusive: '{{label}} must be less than {{max}}',\n      minDate: '{{label}} must be on or after {{min}}',\n      maxDate: '{{label}} cannot be after {{max}}',\n      badDate: '{{label}} is not a valid date',\n      minCount: 'You must specify at least {{minCount}} values',\n      maxCount: 'You cannot specify more than {{maxCount}} values',\n      noDecimal: '{{label}} must be an integer',\n      notAllowed: '{{value}} is not an allowed value',\n      expectedType: '{{label}} must be of type {{dataType}}',\n      regEx: function ({\n        label,\n        type,\n        regExp,\n      }) {\n        // See if there's one where exp matches this expression\n        let msgObj;\n        if (regExp) {\n          msgObj = _.find(regExpMessages, (o) => o.exp && o.exp.toString() === regExp);\n        }\n\n        const regExpMessage = msgObj ? msgObj.msg : 'failed regular expression validation';\n\n        return `${label} ${regExpMessage}`;\n      },\n      keyNotInSchema: '{{name}} is not allowed by the schema',\n    },\n  }\n});\n```\n\n### Getting a Message\n\nTo get a message, you pass a single `ValidationError` error to the `message` function.\n\nHere is a Meteor-specific example:\n\n```js\nTemplate.foo.events({\n  'submit': (event, instance) => {\n    Meteor.call('method', (err) => {\n      if (ValidationError.is(err)) {\n        err.details.forEach((fieldError) => {\n          instance.state.set(`error-${fieldError.name}`: messageBox.message(fieldError));\n        });\n      }\n    });\n  }\n});\n```\n\nSee [https://github.com/meteor/validation-error] for details about the `ValidationError` type.\n\nBy default, this function returns the message for the current language as set with `initialLanguage` or `setLanguage`. However, you can instead specify a particular language:\n\n```js\nconst message = messageBox.message(error, {\n  language: 'pl',\n});\n```\n\n#### Context\n\nIn the \"Defining Messages\" example, the placeholders like `label` and `min` must be in the error object or provided in the context option when calling `messages`:\n\n```js\nconst message = messageBox.message(error, {\n  context: {\n    label: getSomeLabelFor(error.name),\n  },\n});\n```\n\n### Changing the Message Language\n\n```js\nmessageBox.setLanguage('en');\n```\n\n### Reactivity in Meteor\n\nIf you use this in a Meteor app, you can make the messages reactive. Pass `Tracker` into the constructor:\n\n```js\nconst messageBox = new MessageBox({\n  messages: { ... },\n  tracker: Tracker,\n});\n```\n\nThen when you change the language, any call to `messageBox.message()` that does not specify a language and is in a reactive context will rerun.\n\n### Template\n\nBy default (and historically) the substitution of strings is made using `{{}}`, you can change this by passing the `interpolate` and` escape` options:\n\n```js\nconst messageBox = new MessageBox({\n  messages: { ... },\n  interpolate: /{{{([^\\{\\}#][\\s\\S]+?)}}}/g, // default\n  escape: /{{([^\\{\\}#][\\s\\S]+?)}}/g; // default\n});\n```\n\nIt is also possible (but I would not recommend) to use logic within messages by using the `evaluate` option:\n\n```js\nvar SUGGESTED_EVALUATE = require('MessageBox').SUGGESTED_EVALUATE\n// or\nimport { SUGGESTED_EVALUATE } from 'MessageBox';\n\nconst messageBox = new MessageBox({\n  messages: {\n    en: {\n      conditional: '{{# if (value) { }}true{{# } else { }}false{{# } }}',\n    }\n  },\n  evaluate: SUGGESTED_EVALUATE,\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aldeed/node-message-box.git"
  },
  "scripts": {
    "build": "rm -rf dist/** && babel lib --out-dir dist --ignore *.tests.js",
    "jscs": "jscs .",
    "jscs:fix": "jscs . --fix || true",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix || true",
    "prepublish": "npm run build",
    "test": "mocha --compilers js:babel-core/register --recursive 'lib/**/*.tests.js'",
    "test:watch": "npm test -- --watch"
  },
  "version": "0.1.1"
}
